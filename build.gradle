plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.154'
    id "me.modmuss50.mod-publish-plugin" version "0.5.2"
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id

}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
    // applies to all the run configs below
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        def token = providers.environmentVariable("GITHUB_TOKEN")
        if (token.isPresent()) {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/forgecraft/ModListExporter"
                credentials {
                    username = providers.environmentVariable("GITHUB_ACTOR").get()
                    password = token.get()
                }
            }
        } else {
            println("GitHub token not found, skipping GitHub Packages repository")
        }

        def sapsToken = providers.environmentVariable("SAPS_TOKEN")
        if (sapsToken.isPresent()) {
            maven {
                name = "MikeysSapsMavenRepository"
                url = "https://maven.saps.dev/releases"
                credentials {
                    username = "forgecraft"
                    password = sapsToken.get()
                }
            }
        } else {
            println("SAPS token not found, skipping SAPS repository")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

publishMods {
    dryRun = providers.environmentVariable("GITHUB_TOKEN").getOrNull() == null
    file = tasks.jar.archiveFile
    changelog = ""
    type = STABLE

    github {
        repository = "forgecraft/ModListExporter"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
        tagName = providers.environmentVariable("GITHUB_REF_NAME").orElse("dryRun")
    }
}
